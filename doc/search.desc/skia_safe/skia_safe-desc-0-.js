searchState.loadedDescShard("skia_safe", 0, "Single channel data (16-bit half-float) interpreted as …\nSingle channel data (16 bits) interpreted as alpha. RGB …\nFour channel ABGR data (4 bits per channel) packed into a …\nSingle channel data (8-bit) interpreted as an alpha value. …\nRepresents an arc along an oval boundary, or a closed …\nThree channel BGR data (10 bits per channel) packed into a …\nThree channel BGR data (10 bits per channel) packed into a …\nFour channel BGRA data (10 bits per channel) packed into a …\nFour channel BGRA data (10 bits per color, 2 bits for …\nFour channel BGRA data (8 bits per channel) packed into a …\n<code>Bitmap</code> describes a two-dimensional raster pixel array. …\n<code>Blender</code> represents a custom blend function in the Skia …\n<code>Canvas</code> provides an interface for drawing, and how the …\n<code>ColorTable</code> holds the lookup tables for each channel (ARGB) …\nDescribes how pixel bits encode color. A pixel may be an …\nAll Sk* types are accessible via skia_safe::\nSpecify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …\nTrait representing encoded text.\nSingle channel data (8-bit) interpreted as a grayscale …\nWraps a native type that can be represented in Rust memory.\n<code>Image</code> describes a two dimensional array of pixels to draw. …\nMaskFilter is the base class for object that perform …\nRepresents a <code>Canvas</code> that is owned and dropped when it goes …\n<code>Path</code> contain geometry. <code>Path</code> may be empty, or contain one …\nImplement this trait to use a pixel type in …\nAll Sk* types are accessible via skia_safe::\nFour channel RGBA data (16 bits per channel) packed into a …\nTwo channel RG data (16-bit half-float per channel) packed …\nTwo channel RG data (16 bits per channel) packed into a LE …\nTwo channel RG data (8 bits per channel). Blue is forced …\nSingle channel data (8 bits) interpreted as red. G and B …\nA wrapper type represented by a reference counted pointer …\nThree channel RGB data (10 bits per channel) packed into a …\nThree channel BGR data (5 bits red, 6 bits green, 5 bits …\nThree channel RGB data (8 bits per channel) packed into a …\nFour channel RGBA data (10 bits per color, 2 bits for …\nFour channel RGBA data (10 bits per channel) packed into a …\nFour channel RGBA data (8 bits per channel) packed into a …\nFour channel RGBA data (16-bit half-float per channel) …\nFour channel RGBA data (16-bit half-float per channel) …\nFour channel RGBA data (32-bit float per channel) packed …\nThree channel RGB data (16-bit half-float per channel) …\nA wrapper type that represents a native type with a …\nFour channel RGBA data (8 bits per channel) packed into a …\n<code>Surface</code> is responsible for managing the pixels that a …\nSkia                | GL_COMPRESSED_*     | MTLPixelFormat*…\nUnknown or unrepresentable as an SkColorType.\nSpecifies the structure of planes for a YUV image with …\nYUVAInfo combined with per-plane ColorTypes and row bytes. …\nHelper to store Pixmap planes as described by a …\nReturns the pixel base address, <code>ImageInfo</code>, <code>row_bytes</code>, and …\nAppends arc to <code>Path</code>, as the start of new contour. Arc …\nAppends arc to <code>Path</code>, as the start of new contour. Arc …\nAdds circle centered at (x, y) of size radius to <code>Path</code>, …\nAdds circle centered at (x, y) of size radius to <code>Path</code>, …\nAdds oval to <code>Path</code>, appending <code>Verb::Move</code>, four <code>Verb::Conic</code>, …\nAdds oval to <code>Path</code>, appending <code>Verb::Move</code>, four <code>Verb::Conic</code>, …\nAppends src to <code>Path</code>, offset by <code>(d.x, d.y)</code>.\nAppends src to <code>Path</code>, offset by <code>(d.x, d.y)</code>.\nAppends src to <code>Path</code>, transformed by matrix. Transformed …\nAppends src to <code>Path</code>, transformed by matrix. Transformed …\nAdds contour created from line array, adding <code>pts.len() - 1</code> …\nAdds contour created from line array, adding <code>pts.len() - 1</code> …\nAdds a new contour to the path, defined by the rect, and …\nAdds a new contour to the path, defined by the rect, and …\nAppends <code>RRect</code> to <code>Path</code>, creating a new closed contour. <code>RRect</code>…\nAppends <code>RRect</code> to <code>Path</code>, creating a new closed contour. <code>RRect</code>…\nAdds rrect to <code>Path</code>, creating a new closed contour. If dir …\nAdds rrect to <code>Path</code>, creating a new closed contour. If dir …\nAll legal combinations of PlaneConfig and DataType are …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nSets <code>ImageInfo</code> to width, height, and native color type; …\nSets <code>ImageInfo</code> to width, height, and native color type; …\nAllocates pixel memory with HeapAllocator, and replaces …\nAllocates pixel memory with HeapAllocator, and replaces …\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …\nAllocate space for pixmaps’ pixels in the YUVAPixmaps.\nAllocate space for pixmaps’ pixels in the YUVAPixmaps.\nReturns <code>AlphaType</code>.\nReturns <code>AlphaType</code>.\nReturns the approximate byte size of the <code>Path</code> in memory.\nReturns the approximate byte size of the <code>Path</code> in memory.\nAll Sk* types are accessible via skia_safe::\nAppends arc to <code>Path</code>. Arc added is part of ellipse bounded …\nAppends arc to <code>Path</code>. Arc added is part of ellipse bounded …\nAppends arc to <code>Path</code>. Arc is implemented by one or more …\nAppends arc to <code>Path</code>. Arc is implemented by one or more …\nAppends arc to <code>Path</code>, after appending line if needed. Arc …\nAppends arc to <code>Path</code>, after appending line if needed. Arc …\n<code>arithmetic()</code>\n<code>arithmetic()</code>\nReturns a new image from the bitmap. If the bitmap is …\nReturns a new image from the bitmap. If the bitmap is …\nTreat a <code>&amp;[u16]</code> as UTF16 encoded text.\nTreat a <code>&amp;[u32]</code> as UTF32 encoded text.\nRetrieves the back-end texture. If <code>Image</code> has no back-end …\nRetrieves the back-end texture. If <code>Image</code> has no back-end …\nGets the size of the base or root layer in global canvas …\nReturns the <code>SurfaceProps</code> associated with the canvas (i.e., …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>blur()</code>\nCreate a blur mask filter.\n<code>blur()</code>\nCreate a blur mask filter.\nThe y coordinate of the rectangle’s bottom edge.\nThe y coordinate of the rectangle’s bottom edge.\nReturns <code>IRect { 0, 0, width(), height() }</code>.\nReturns <code>IRect</code> <code>{ 0, 0, width(), height() }</code>.\nReturns minimum and maximum axes values of <code>Point</code> array. …\nReturns <code>IRect { 0, 0, width(), height() }</code>.\nReturns minimum and maximum axes values of <code>Point</code> array. …\nReturns <code>IRect</code> <code>{ 0, 0, width(), height() }</code>.\nAccess the underlying pixels as a byte array. This is a …\nReturns number of bytes per pixel required by <code>ColorType</code>.\nReturns number of bytes per pixel required by <code>ColorType</code>.\nReturns <code>true</code> if the handle can be sent to another thread.\nAll Sk* types are accessible via skia_safe::\nBorrows the canvas for the current page on the document.\nReturns <code>Canvas</code> that draws into <code>Surface</code>. Subsequent calls …\nReturns <code>Canvas</code> that draws into <code>Surface</code>. Subsequent calls …\nFills clip with color <code>color</code> using <code>BlendMode::Src</code>. This has …\nReplaces clip with the intersection or difference of clip …\nReplaces clip with the intersection or difference of clip …\nReplaces clip with the intersection or difference of clip …\nReplaces clip with the intersection or difference of clip …\nClose the document and return the encoded representation.\nAppends <code>Verb::Close</code> to <code>Path</code>. A closed contour connects the …\nAppends <code>Verb::Close</code> to <code>Path</code>. A closed contour connects the …\nAll Sk* types are accessible via skia_safe::\n<code>color_filter()</code>\n<code>color_filter()</code>\nReturns <code>ColorSpace</code>, the range of colors, associated with …\nReturns a smart pointer to <code>ColorSpace</code>, the range of …\nReturns <code>ColorSpace</code>, the range of colors, associated with …\nReturns a smart pointer to <code>ColorSpace</code>, the range of …\nReturns <code>ColorType</code> if known; otherwise, returns …\nReturns <code>ColorType</code> if known; otherwise, returns …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>compose()</code>\n<code>compose()</code>\nConstruct a color filter whose effect is to first apply …\nConstruct a color filter whose effect is to first apply …\nReturns minimum memory required for pixel storage. Does …\nReturns minimum memory required for pixel storage. Does …\nReturns <code>true </code>if all pixels are opaque. <code>ColorType</code> …\nReturns <code>true </code>if all pixels are opaque. <code>ColorType</code> …\nReturns minimum and maximum axes values of the lines and …\nReturns minimum and maximum axes values of the lines and …\nGiven a per-plane row bytes, determine size to allocate …\nDetermine size to allocate for all planes. Optionally …\nGiven a per-plane row bytes, determine size to allocate …\nDetermine size to allocate for all planes. Optionally …\nReplaces <code>Matrix</code> with matrix premultiplied with existing …\nAdds conic from last point towards (x1, y1), to (x2, y2), …\nAdds conic from last point towards (x1, y1), to (x2, y2), …\nReturns <code>true</code> if rect is contained by <code>Path</code>. May return <code>false</code>…\nReturns <code>true</code> if rect is contained by <code>Path</code>. May return <code>false</code>…\nReturns <code>true</code> if the point <code>(p.x, p.y)</code> is contained by <code>Path</code>, …\nReturns <code>true</code> if the point <code>(p.x, p.y)</code> is contained by <code>Path</code>, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nChecks if a given text blob contains colored font or bitmap\nChecks if a given text blob contains glyph with emoji\nAll Sk* types are accessible via skia_safe::\nApproximates conic with quad array. Conic is constructed …\nApproximates conic with quad array. Conic is constructed …\nReturns the number of points in <code>Path</code>. <code>Point</code> count is …\nReturns the number of points in <code>Path</code>. <code>Point</code> count is …\nReturns the number of verbs: <code>Verb::Move</code>, <code>Verb::Line</code>, …\nReturns the number of verbs: <code>Verb::Move</code>, <code>Verb::Line</code>, …\n<code>crop()</code>\n<code>crop()</code>\nAdds cubic from last point towards (x1, y1), then towards …\nAdds cubic from last point towards (x1, y1), then towards …\nThe per-YUV<code>[A]</code> channel data type.\nThe per-YUV<code>[A]</code> channel data type.\n1..31\n0..6, 0==Sunday\nSee <code>Bitmap::new()</code>.\nCreates an empty <code>Canvas</code> with no backing device or pixels, …\nSee <code>Self::new()</code>\nReturns a copy of this path in the current state, and …\nReturns a copy of this path in the current state, and …\nReturns <code>IRect</code> bounds of clip, unaffected by <code>Matrix</code>. If …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>dilate()</code>\n<code>dilate()</code>\nReturns <code>ISize { width(), height() }</code>.\nReturns <code>ISize</code> <code>{ width(), height() }</code>.\nDimensions of the full resolution image (after planes have …\nDimensions of the full resolution image (after planes have …\nReturns <code>ISize { width(), height() }</code>.\nReturns <code>ISize</code> <code>{ width(), height() }</code>.\nReturns the <code>gpu::DirectContext</code>. This is a rust-skia helper …\nrust-skia helper, not in Skia\nrust-skia helper, not in Skia\nMakes <code>Canvas</code> contents undefined. Subsequent calls that …\n<code>displacement_map()</code>\n<code>displacement_map()</code>\n<code>distant_lit_diffuse()</code>\n<code>distant_lit_diffuse()</code>\n<code>distant_lit_specular()</code>\n<code>distant_lit_specular()</code>\nAll Sk* types are accessible via skia_safe::\nDraws <code>Surface</code> contents to canvas, with its top-left corner …\nDraws <code>Surface</code> contents to canvas, with its top-left corner …\nAssociates <code>Rect</code> on <code>Canvas</code> when an annotation; a key-value …\nDraws arc using clip, <code>Matrix</code>, and <code>Paint</code> paint.\nDraws arc using clip, <code>Matrix</code>, and <code>Paint</code> paint.\nDraws a set of sprites from atlas, using clip, <code>Matrix</code>, and …\nDraws circle at center with radius using clip, <code>Matrix</code>, and …\nFills clip with color <code>color</code>. <code>mode</code> determines how ARGB is …\nDraws <code>Drawable</code> drawable using clip and <code>Matrix</code>, …\nDraws <code>Drawable</code> drawable using clip and <code>Matrix</code>, offset by …\nDraws <code>RRect</code> outer and inner using clip, <code>Matrix</code>, and <code>Paint</code> …\nDraws <code>count</code> glyphs, at positions relative to <code>origin</code> styled …\nDraws glyphs at positions relative to <code>origin</code> styled with …\nDraws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…\nDraws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…\nDraws <code>IRect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …\nDraws line segment from <code>p1</code> to <code>p2</code> using clip, <code>Matrix</code>, and …\nDraws oval oval using clip, <code>Matrix</code>, and <code>Paint</code>. In <code>paint</code>: …\nFills clip with <code>Paint</code> <code>paint</code>. <code>Paint</code> components, <code>Shader</code>, …\nDraws a Coons patch: the interpolation of four cubics with …\nDraws <code>Path</code> path using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. <code>Path</code> …\nDraws <code>Picture</code> picture, using clip and <code>Matrix</code>; transforming …\nDraws point <code>p</code> using clip, <code>Matrix</code> and <code>Paint</code> paint.\nDraws <code>pts</code> using clip, <code>Matrix</code> and <code>Paint</code> <code>pain</code>. if the number …\nDraws <code>Rect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …\nDraws <code>Region</code> region using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. …\nDraws <code>RRect</code> bounded by <code>Rect</code> rect, with corner radii …\nDraws <code>RRect</code> rrect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …\nDraws <code>String</code>, with origin at <code>(origin.x, origin.y)</code>, using …\nDraws <code>TextBlob</code> blob at <code>(origin.x, origin.y)</code>, using clip, …\nDraws <code>Vertices</code> vertices, a triangle mesh, using clip and …\nAll Sk* types are accessible via skia_safe::\nReturns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …\nReturns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …\nDraws saved layers, if any. Frees up resources used by …\nSee <code>Path::dump_as_data()</code>\nSee <code>Path::dump_as_data()</code>\nWrites text representation of <code>Path</code> to <code>Data</code>. Set <code>dump_as_hex</code>…\nWrites text representation of <code>Path</code> to <code>Data</code>. Set <code>dump_as_hex</code>…\nSee <code>Path::dump_as_data()</code>\nSee <code>Path::dump_as_data()</code>\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nUpdate to add support for pixmaps with <code>num_channels</code> …\nSee <code>Self::encode_to_data_with_quality</code>\nSee <code>Self::encode_to_data_with_quality</code>\nEncodes <code>Image</code> pixels, returning result as <code>Data</code>.\nEncodes <code>Image</code> pixels, returning result as <code>Data</code>.\nEncodes <code>Image</code> pixels, returning result as <code>Data</code>.\nEncodes <code>Image</code> pixels, returning result as <code>Data</code>.\nReturns encoded <code>Image</code> pixels as <code>Data</code>, if <code>Image</code> was created …\nReturns encoded <code>Image</code> pixels as <code>Data</code>, if <code>Image</code> was created …\nEnds the page.\nReplaces pixel values inside area with c. interpreted as …\nReplaces pixel values inside area with c. interpreted as …\nReplaces pixel values inside area with c. interpreted as …\nReplaces pixel values inside area with c. interpreted as …\nReplaces pixel values with unpremultiplied color built …\nReplaces pixel values with unpremultiplied color built …\nReplaces pixel values with <code>c</code>, interpreted as being in the …\nReplaces pixel values with <code>c</code>, interpreted as being in the …\nReplaces pixel values with <code>c</code>, interpreted as being in the …\nReplaces pixel values with <code>c</code>, interpreted as being in the …\n<code>erode()</code>\n<code>erode()</code>\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nSets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…\nSets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…\nShares <code>PixelRef</code> with <code>dst</code>. Pixels are not copied; <code>Bitmap</code> …\nShares <code>PixelRef</code> with <code>dst</code>. Pixels are not copied; <code>Bitmap</code> …\nReturns <code>PathFillType</code>, the rule used to fill <code>Path</code>.\nReturns <code>PathFillType</code>, the rule used to fill <code>Path</code>.\nConverts the src color (in src colorspace), into the dst …\nConverts the src color (in src colorspace), into the dst …\nSee <code>Self::flush_with_info()</code>\nSee <code>Self::flush_with_info()</code>\nVersion of <code>flush()</code> that uses a default <code>gpu::FlushInfo</code>. …\nVersion of <code>flush()</code> that uses a default <code>gpu::FlushInfo</code>. …\nFlushes any pending uses of texture-backed images in the …\nFlushes any pending uses of texture-backed images in the …\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Image</code> from <code>backend_texture</code> associated with …\nCreates <code>Image</code> from <code>backend_texture</code> associated with …\nWraps a GPU-backed buffer into <code>Surface</code>. Caller must ensure …\nWraps a GPU-backed buffer into <code>Surface</code>. Caller must ensure …\nWraps a GPU-backed texture into <code>Surface</code>. Caller must …\nWraps a GPU-backed texture into <code>Surface</code>. Caller must …\nConstructs a canvas that draws into bitmap. Use props to …\nCreates <code>Image</code> from bitmap, sharing or copying bitmap …\nCreates <code>Image</code> from bitmap, sharing or copying bitmap …\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates <code>Surface</code> from CAMetalLayer. Returned <code>Surface</code> takes …\nCreates <code>Surface</code> from CAMetalLayer. Returned <code>Surface</code> takes …\nUse storage in Data as backing store for pixmaps’ …\nUse storage in Data as backing store for pixmaps’ …\nLike above but uses …\nLike above but uses …\nSee <code>Self::from_encoded_with_alpha_type()</code>\nSee <code>Self::from_encoded_with_alpha_type()</code>\nReturn an image backed by the encoded data, but attempt to …\nReturn an image backed by the encoded data, but attempt to …\nUse passed in memory as backing store for pixmaps’ …\nUse passed in memory as backing store for pixmaps’ …\nWraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …\nWraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …\nCreate a new <code>Data</code> referencing the file with the specified …\nCreate a new <code>Data</code> referencing the file with the specified …\nCreates <code>Image</code> from data returned by <code>image_generator</code>. …\nCreates <code>Image</code> from data returned by <code>image_generator</code>. …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreates <code>Surface</code> from MTKView. Returned <code>Surface</code> takes a …\nCreates <code>Surface</code> from MTKView. Returned <code>Surface</code> takes a …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nSee <code>Self::from_picture_with_props()</code>\n<code>self::picture()</code>\nSee <code>Self::from_picture_with_props()</code>\n<code>self::picture()</code>\nCreates <code>Image</code> from picture. Returned <code>Image</code> width and …\nCreates <code>Image</code> from picture. Returned <code>Image</code> width and …\nCreates <code>Image</code> from <code>ImageInfo</code>, sharing pixels.\nCreates <code>Image</code> from <code>ImageInfo</code>, sharing pixels.\nAllocates raster <code>Canvas</code> that will draw directly into …\nAllocates raster <code>Canvas</code> specified by inline image …\nAttempt to read size bytes into a <code>Data</code>. If the read …\nAttempt to read size bytes into a <code>Data</code>. If the read …\nCreates <code>Image</code> from GPU texture associated with context. …\nCreates <code>Image</code> from GPU texture associated with context. …\nCreates <code>Image</code> from <code>crate::YUVAPixmaps</code>.\nCreates <code>Image</code> from <code>crate::YUVAPixmaps</code>.\nCreates an <code>Image</code> from <code>YUV[A]</code> planar textures. This …\nCreates an <code>Image</code> from <code>YUV[A]</code> planar textures. This …\nReturns a unique value corresponding to the pixels in …\n(See skbug.com/40032862) Returns a non-zero, globally …\nReturns unique value identifying the content of <code>Surface</code>. …\nReturns a unique value corresponding to the pixels in …\n(See skbug.com/40032862) Returns a non-zero, globally …\nReturns unique value identifying the content of <code>Surface</code>. …\nReturns the visible text on the line (excluding a possible …\nReturns pixel address at <code>(x, y)</code>.\nReturns pixel address at <code>(x, y)</code>.\nLook up the pixel at <code>(x,y)</code> and return its alpha component, …\nLook up the pixel at <code>(x,y)</code> and return its alpha component, …\nRetrieves the back-end render target. If <code>Surface</code> has no …\nRetrieves the back-end render target. If <code>Surface</code> has no …\nRetrieves the back-end texture. If <code>Surface</code> has no back-end …\nRetrieves the back-end texture. If <code>Surface</code> has no back-end …\nFinds the closest glyph cluster for a visual text position\nFinds the information associated with the closest glyph to …\nReturns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …\nReturns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …\nReturns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …\nReturns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …\nReturns the font that is used to shape the text at the …\nReturns the font used to shape the text at the given …\nReturns the information about all the fonts used to shape …\nFinds a glyph cluster for text index\nRetrieves the information associated with the glyph …\nReturns the index of the glyph that corresponds to the …\nReturns line metrics info for the line\nFinds the line number of the line that contains the given …\nFinds the line number of the line that contains the given …\nReturns path for a text blob\nReturns path for a given line\nReturns <code>Point</code> at index in <code>Point</code> array. Valid range for …\nReturns <code>Point</code> at index in <code>Point</code> array. Valid range for …\nReturns number of points in <code>Path</code>. Copies N points from the …\nReturns number of points in <code>Path</code>. Copies N points from the …\nReturns a vector of bounding boxes that enclose all text …\nReturns the bounds of this bitmap, offset by its <code>PixelRef</code> …\nReturns the bounds of this bitmap, offset by its <code>PixelRef</code> …\nReturns number of points in <code>Path</code>. Copies N points from the …\nReturns number of points in <code>Path</code>. Copies N points from the …\nFinds the first and last glyphs that define a word …\nAll Sk* types are accessible via skia_safe::\nPreserves <code>Canvas::save()</code> count. Optionally saves <code>Canvas</code> …\nReturns <code>true</code> if the image has mipmap levels.\nReturns <code>true</code> if the image has mipmap levels.\nReturns pixel row count.\nReturns pixel row count.\nReturns pixel row count; may be zero or greater.\nReturns pixel row count.\nReturns pixel row count; may be zero or greater.\nReturns pixel row count.\n0..23\nAll Sk* types are accessible via skia_safe::\nReturns iff this shader is backed by a single <code>Image</code>. If …\nReturns iff this shader is backed by a single <code>Image</code>. If …\nAll Sk* types are accessible via skia_safe::\nReturns <code>ImageInfo</code> for <code>Canvas</code>. If <code>Canvas</code> is not associated …\nReturns a <code>ImageInfo</code> describing the width, height, color …\nReturns an <code>ImageInfo</code> describing the surface.\nReturns a <code>ImageInfo</code> describing the width, height, color …\nReturns an <code>ImageInfo</code> describing the surface.\nReturns <code>Image</code> capturing <code>Surface</code> contents. Subsequent …\nReturns <code>Image</code> capturing <code>Surface</code> contents. Subsequent …\nLike the no-parameter version, this returns an image of …\nLike the no-parameter version, this returns an image of …\nGrows <code>Path</code> verb array and <code>Point</code> array to contain …\nGrows <code>Path</code> verb array and <code>Point</code> array to contain …\nGrows <code>Path</code> verb array and <code>Point</code> array to contain …\nGrows <code>Path</code> verb array and <code>Point</code> array to contain …\nReturns width, height, <code>AlphaType</code>, ColorType, and <code>ColorSpace</code>…\nReturns width, height, <code>AlphaType</code>, ColorType, and <code>ColorSpace</code>…\nTakes an allocation that is assumed to be at least […\nTakes an allocation that is assumed to be at least […\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code>, …\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code>, …\nInterpolates between <code>Path</code> with <code>Point</code> array of equal size. …\nInterpolates between <code>Path</code> with <code>Point</code> array of equal size. …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll concrete node types can be converted to the supertype …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if <code>Image</code> pixels represent transparency only. …\nReturns <code>true</code> if <code>Image</code> pixels represent transparency only. …\nReturns <code>true</code> if the filter is guaranteed to never change …\nReturns <code>true</code> if the filter is guaranteed to never change …\nReturns <code>true</code> if clip is empty; that is, nothing will draw.\nReturns <code>true</code> if clip is <code>Rect</code> and not empty. Returns <code>false</code> …\nReturns <code>true</code> if the path is convex. If necessary, it will …\nReturns <code>true</code> if the path is convex. If necessary, it will …\nTests if cubic is degenerate. Cubic with no length or that …\nTests if cubic is degenerate. Cubic with no length or that …\nReturns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.\nReturns if <code>Path</code> is empty. Empty <code>Path</code> may have FillType but …\nReturns if <code>Path</code> is empty. Empty <code>Path</code> may have FillType but …\nReturns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> for finite <code>Point</code> array values between …\nReturns <code>true</code> for finite <code>Point</code> array values between …\nReturns <code>true</code> if pixels can not change.\nReturns <code>true</code> if pixels can not change.\nReturns <code>true</code> if <code>Path</code> contain equal verbs and equal weights.\nReturns <code>true</code> if <code>Path</code> contain equal verbs and equal weights.\nReturns if FillType describes area outside <code>Path</code> geometry. …\nReturns if FillType describes area outside <code>Path</code> geometry. …\nReturns if contour is closed. Contour is closed if <code>Path</code> …\nReturns if contour is closed. Contour is closed if <code>Path</code> …\nReturns <code>true</code> if <code>Image</code> is backed by an image-generator or …\nReturns <code>true</code> if <code>Image</code> is backed by an image-generator or …\nReturns <code>true</code> if <code>Path</code> contains only one line; <code>Verb</code> array …\nReturns <code>true</code> if <code>Path</code> contains only one line; <code>Verb</code> array …\nTests if line between <code>Point</code> pair is degenerate. Line with …\nTests if line between <code>Point</code> pair is degenerate. Line with …\nReturns <code>true</code> if <code>PixelRef</code> is <code>None</code>.\nReturns <code>true</code> if <code>PixelRef</code> is <code>None</code>.\nReturns <code>true</code> if <code>AlphaType</code> is set to hint that all pixels …\nReturns <code>true</code> if pixels ignore their alpha value and are …\nReturns <code>true</code> if the shader is guaranteed to produce only …\nReturns <code>true</code> if <code>AlphaType</code> is set to hint that all pixels …\nReturns <code>true</code> if pixels ignore their alpha value and are …\nReturns <code>true</code> if the shader is guaranteed to produce only …\nReturns <code>true</code> if this path is recognized as an oval or …\nReturns <code>true</code> if this path is recognized as an oval or …\nTests if quad is degenerate. Quad with no length or that …\nTests if quad is degenerate. Quad with no length or that …\nReturns <code>true</code> if <code>Bitmap</code> can be drawn.\nReturns <code>true</code> if <code>Bitmap</code> can be drawn.\nReturns <code>Some(Rect, bool, PathDirection)</code> if <code>Path</code> is …\nReturns <code>Some(Rect, bool, PathDirection)</code> if <code>Path</code> is …\nReturns <code>RRect</code> if path is representable as <code>RRect</code>. Returns …\nReturns <code>RRect</code> if path is representable as <code>RRect</code>. Returns …\nIs this valid and does it use color types allowed by the …\nIs this valid and does it use color types allowed by the …\nReturns <code>true</code> if the contents of <code>Image</code> was created on or …\nReturns <code>true</code> if the contents of <code>Image</code> was created on or …\nReturns <code>true</code> if <code>Image</code> can be drawn on either raster …\nReturns if <code>Path</code> data is consistent. Corrupt <code>Path</code> data is …\nReturns if <code>Path</code> data is consistent. Corrupt <code>Path</code> data is …\nReturns <code>true</code> if <code>Image</code> can be drawn on either raster …\nReturns <code>true</code> if the path is volatile; it will not be …\nReturns <code>true</code> if the path is volatile; it will not be …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns last point on <code>Path</code>. Returns <code>None</code> if <code>Point</code> array is …\nReturns last point on <code>Path</code>. Returns <code>None</code> if <code>Point</code> array is …\nThe x coordinate of the rectangle’s left edge.\nThe x coordinate of the rectangle’s left edge.\nAdds line from last point to (x, y). If <code>Path</code> is empty, or …\nAdds line from last point to (x, y). If <code>Path</code> is empty, or …\nReturns bounds of clip, transformed by inverse of <code>Matrix</code>. …\nReturns the current transform from local coordinates to …\nThrows away the 3rd row and column in the matrix, so be …\n<code>magnifier()</code>\n<code>magnifier()</code>\nCreates <code>Image</code> in target <code>ColorSpace</code>. Returns <code>None</code> if <code>Image</code> …\nCreates <code>Image</code> in target <code>ColorSpace</code>. Returns <code>None</code> if <code>Image</code> …\nReturns raster image or lazy image. Copies <code>Image</code> backed by …\nReturns raster image or lazy image. Copies <code>Image</code> backed by …\nReturns raster image. Copies <code>Image</code> backed by GPU texture …\nReturns raster image. Copies <code>Image</code> backed by GPU texture …\nCreate a new image by copying this image and scaling to …\nCreate a new image by copying this image and scaling to …\nReturns subset of this image.\nReturns subset of this image.\nReturns an <code>Image</code> capturing the current <code>Surface</code> contents. …\nReturns an <code>Image</code> capturing the current <code>Surface</code> contents. …\n<code>true</code> if the type matches the color type’s format.\nAll Sk* types are accessible via skia_safe::\n<code>matrix_convolution()</code>\n<code>matrix_convolution()</code>\n<code>merge()</code>\n<code>merge()</code>\n0..59\nCreate a blender that implements the specified <code>BlendMode</code>.\nCreate a blender that implements the specified <code>BlendMode</code>.\n1..12\nSpecifies the beginning of contour. If the previous verb …\nSpecifies the beginning of contour. If the previous verb …\nColor primaries defined by ITU-T H.273, table 2. Names are …\nMacro to mark a Rust type as NativeTransmutable and test …\nCreates an empty <code>Bitmap</code> without pixels, with …\nCreates <code>Canvas</code> of the specified dimensions without a …\nCreates a new <code>ColorTable</code> with ‘table’ used for all …\nConstructs an empty <code>Path</code>. By default, <code>Path</code> has no verbs, …\n<code>dimensions</code> should specify the size of the full resolution …\nInitializes the YUVAPixmapInfo from a YUVAInfo with …\n<code>dimensions</code> should specify the size of the full resolution …\nSafety\nSafety\nConstructs a native Strings array from a slice of …\nInitializes the YUVAPixmapInfo from a YUVAInfo with …\nInitializes a YUVABackendTextureInfo to describe a set of …\nCreates an empty <code>Bitmap</code> without pixels, with …\nConstructs an empty <code>Path</code>. By default, <code>Path</code> has no verbs, …\nCreates a new <code>ColorTable</code> with ‘table’ used for all …\nConstructs Data from a given byte slice without copying it.\nConstructs Data from a given byte slice without copying it.\nCreates <code>Image</code> from pixmap. <code>Image</code> is uploaded to GPU …\nCreates <code>Image</code> from pixmap. <code>Image</code> is uploaded to GPU …\nConstructs Data from a &amp;CStr by copying its contents.\nConstructs Data from a &amp;CStr by copying its contents.\nCreate a new path with the specified spans.\nCreate a new path with the specified spans.\nReturns <code>Surface</code> without backing pixels. Drawing to <code>Canvas</code> …\nReturns <code>Surface</code> without backing pixels. Drawing to <code>Canvas</code> …\nAllocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …\nAllocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …\nAllocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …\nAllocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …\nCreates a CPU-backed <code>Image</code> from compressed data.\nCreates a CPU-backed <code>Image</code> from compressed data.\nAllocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …\nAllocates raster <code>Surface</code>. <code>Canvas</code> returned by <code>Surface</code> draws …\nReturns <code>Surface</code> on GPU indicated by context. Allocates …\nReturns <code>Surface</code> on GPU indicated by context. Allocates …\nConstructs Data from a copy of a &amp;str.\nConstructs Data from a copy of a &amp;str.\nCreates <code>Surface</code> matching info and props, and associates it …\nReturns a compatible <code>Surface</code>, or <code>None</code>. Returned <code>Surface</code> …\nReturns a compatible <code>Surface</code>, or <code>None</code>. Returned <code>Surface</code> …\nCalls <code>Self::new_surface()</code> with the same <code>ImageInfo</code> as this …\nCalls <code>Self::new_surface()</code> with the same <code>ImageInfo</code> as this …\nCreates a GPU-backed <code>Image</code> from compressed data.\nCreates a GPU-backed <code>Image</code> from compressed data.\nSee <code>Self::new_texture_image_budgeted</code>\nSee <code>Self::new_texture_image_budgeted</code>\nReturns <code>Image</code> backed by GPU texture associated with …\nReturns <code>Image</code> backed by GPU texture associated with …\nCreates filtered <code>Image</code>. filter processes original <code>Image</code>, …\nCreates filtered <code>Image</code>. filter processes original <code>Image</code>, …\nHolds the current verb, and its associated points move:  …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNotifies that <code>Surface</code> contents will be changed by code …\nNotifies that <code>Surface</code> contents will be changed by code …\nMarks that pixels in <code>PixelRef</code> have changed. Subsequent …\nMarks that pixels in <code>PixelRef</code> have changed. Subsequent …\nThe number of Pixmap planes.\nNumber of pixmap planes.\nNumber of pixmap planes.\nThe number of crate::Pixmap planes.\nThe number of Pixmap planes.\n<code>offset()</code>\nOffsets <code>Point</code> array by <code>(d.x, d.y)</code>. <code>Path</code> is replaced by …\nOffsets <code>Point</code> array by <code>(d.x, d.y)</code>. <code>Path</code> is replaced by …\n<code>offset()</code>\nBounds of oval containing the arc.\nThe current page we are currently drawing on.\nThe number of pages in this document.\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nCopies <code>Bitmap</code> pixel address, row bytes, and <code>ImageInfo</code> to …\nReturns <code>true</code> if <code>Canvas</code> has direct access to its pixels.\nCopies <code>Image</code> pixel address, row bytes, and <code>ImageInfo</code> to …\nCopies <code>Bitmap</code> pixel address, row bytes, and <code>ImageInfo</code> to …\nCopies <code>Image</code> pixel address, row bytes, and <code>ImageInfo</code> to …\nAll Sk* types are accessible via skia_safe::\nReturns <code>PixelRef</code>, which contains: pixel base address; its …\nReturns <code>PixelRef</code>, which contains: pixel base address; its …\nReturns origin of pixels within <code>PixelRef</code>. <code>Bitmap</code> bounds is …\nReturns origin of pixels within <code>PixelRef</code>. <code>Bitmap</code> bounds is …\nReturns pixel address, the base address corresponding to …\nAccess the underlying pixels. This is a rust-skia specific …\nReturns pixel address, the base address corresponding to …\nReturns a constant reference to the <code>Pixmap</code> holding the …\nReturns a constant reference to the <code>Pixmap</code> holding the …\nGet the ith Pixmap plane. <code>Pixmap</code> will be default …\nGet the ith Pixmap plane. <code>Pixmap</code> will be default …\nReturns the dimensions for each plane. Dimensions are as …\nReturns the dimensions for each plane. Dimensions are as …\nFormat of the ith plane, or <code>None</code> if <code>i &gt;= Self::num_planes()</code>\nAll plane formats.\nImage info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …\nImage info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …\nAn iterator of all planes’ image infos.\nAn iterator of all planes’ image infos.\nAccess the Pixmap planes.\nAccess the Pixmap planes.\n<code>point_lit_diffuse()</code>\n<code>point_lit_diffuse()</code>\n<code>point_lit_specular()</code>\n<code>point_lit_specular()</code>\nCopies <code>SurfaceProps</code>, if <code>Canvas</code> is associated with raster …\nReturns <code>SurfaceProps</code> for surface.\nReturns <code>SurfaceProps</code> for surface.\nAdds quad from last point towards (x1, y1), to (x2, y2). …\nAdds quad from last point towards (x1, y1), to (x2, y2). …\nReturns <code>true</code> if <code>Rect</code> <code>rect</code>, transformed by <code>Matrix</code>, can be …\nReturns <code>true</code> if <code>path</code>, transformed by <code>Matrix</code>, can be …\nAppends arc to <code>Path</code>, relative to last <code>Path</code> <code>Point</code>. Arc is …\nAppends arc to <code>Path</code>, relative to last <code>Path</code> <code>Point</code>. Arc is …\nAdds conic from last point towards vector (dx1, dy1), to …\nAdds conic from last point towards vector (dx1, dy1), to …\nAdds cubic from last point towards vector (dx1, dy1), then …\nAdds cubic from last point towards vector (dx1, dy1), then …\nAdds line from last point to vector (dx, dy). If <code>Path</code> is …\nAdds line from last point to vector (dx, dy). If <code>Path</code> is …\nAdds beginning of contour relative to last point. If <code>Path</code> …\nAdds beginning of contour relative to last point. If <code>Path</code> …\nAdds quad from last point towards vector (dx1, dy1), to …\nAdds quad from last point towards vector (dx1, dy1), to …\nCreate a new path with the specified spans.\nCreate a new path with the specified spans.\nCopies a <code>crate::Rect</code> of pixels from <code>Bitmap</code> to <code>dst_pixels</code>. …\nCopies <code>Rect</code> of pixels from <code>Canvas</code> into <code>dst_pixels</code>. <code>Matrix</code> …\nSee <code>Self::read_pixels_with_context()</code>\nCopies <code>crate::Rect</code> of pixels from <code>Canvas</code> into <code>dst_pixels</code>.\nCopies a <code>crate::Rect</code> of pixels from <code>Bitmap</code> to <code>dst_pixels</code>. …\nSee <code>Self::read_pixels_with_context()</code>\nCopies <code>crate::Rect</code> of pixels from <code>Canvas</code> into <code>dst_pixels</code>.\nCopies <code>Rect</code> of pixels from <code>Canvas</code> into bitmap. <code>Matrix</code> and …\nCopies <code>crate::Rect</code> of pixels from <code>Surface</code> into bitmap.\nCopies <code>crate::Rect</code> of pixels from <code>Surface</code> into bitmap.\nCopies <code>Rect</code> of pixels from <code>Canvas</code> into pixmap. <code>Matrix</code> and …\nSee <code>Self::read_pixels_to_pixmap_with_context()</code>\nCopies <code>crate::Rect</code> of pixels to dst.\nSee <code>Self::read_pixels_to_pixmap_with_context()</code>\nCopies <code>crate::Rect</code> of pixels to dst.\nCopies a <code>crate::Rect</code> of pixels from <code>Image</code> to dst. Copy …\nCopies a <code>crate::Rect</code> of pixels from <code>Image</code> to dst. Copy …\nCopies <code>crate::Rect</code> of pixels from <code>Image</code> to <code>dst_pixels</code>. …\nCopies <code>crate::Rect</code> of pixels from <code>Image</code> to <code>dst_pixels</code>. …\nAll Sk* types are accessible via skia_safe::\nReturns Ganesh context of the GPU surface associated with …\nReturns the recording context being used by the <code>Surface</code>.\nReturns the recording context being used by the <code>Surface</code>.\nAll Sk* types are accessible via skia_safe::\nCreates a new <code>Image</code> identical to this one, but with a …\nCreates a new <code>Image</code> identical to this one, but with a …\nNotify that the borrowed dependency is not referred to …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIf the surface was made via <code>Self::from_backend_texture</code> …\nIf the surface was made via <code>Self::from_backend_texture</code> …\nIf the surface was made via <code>Self::from_backend_texture()</code> …\nIf the surface was made via <code>Self::from_backend_texture()</code> …\nResets to its initial state; all fields are set to zero, …\nSets <code>Path</code> to its initial state. Removes verb array, <code>Point</code> …\nResets to its initial state; all fields are set to zero, …\nSets <code>Path</code> to its initial state. Removes verb array, <code>Point</code> …\nSets <code>Matrix</code> to the identity matrix. Any prior matrix state …\nIf a surface is GPU texture backed, is being drawn with …\nIf a surface is GPU texture backed, is being drawn with …\nRemoves changes to <code>Matrix</code> and clip since <code>Canvas</code> state was …\nRestores state to <code>Matrix</code> and clip values when <code>Self::save()</code>…\nAppends src to <code>Path</code>, from back to front. Reversed src …\nAppends src to <code>Path</code>, from back to front. Reversed src …\nSets <code>Path</code> to its initial state, preserving internal …\nSets <code>Path</code> to its initial state, preserving internal …\nThe x coordinate of the rectangle’s right edge.\nThe x coordinate of the rectangle’s right edge.\nRotates <code>Matrix</code> by degrees about a point at <code>(p.x, p.y)</code>. …\nReturns row bytes, the interval from one pixel row to the …\nRow bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …\nReturns row bytes, the interval from one pixel row to the …\nRow bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …\nReturns number of pixels that fit on row. Should be …\nReturns number of pixels that fit on row. Should be …\nRow bytes for all planes.\nRow bytes for all planes.\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nSaves <code>Matrix</code> and clip. Calling <code>Self::restore()</code> discards …\nReturns the number of saved states, each containing: <code>Matrix</code>…\nSaves <code>Matrix</code> and clip, and allocates <code>Surface</code> for …\nHelper that accepts an int between 0 and 255, and divides …\nSaves <code>Matrix</code> and clip, and allocates <code>Surface</code> for …\nScales <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis.\nCopies <code>Image</code> to dst, scaling pixels to fit <code>dst.width()</code> and …\nCopies <code>Image</code> to dst, scaling pixels to fit <code>dst.width()</code> and …\n0..59\nReturns a mask, where each set bit corresponds to a …\nReturns a mask, where each set bit corresponds to a …\nWrites <code>Path</code> to buffer, returning the buffer written to, …\nWrites <code>Path</code> to buffer, returning the buffer written to, …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets <code>AlphaType</code>, if <code>alpha_type</code> is compatible with <code>ColorType</code>…\nSets <code>AlphaType</code>, if <code>alpha_type</code> is compatible with <code>ColorType</code>…\nSets the <code>ColorSpace</code> associated with this <code>Bitmap</code>.\nSets the <code>ColorSpace</code> associated with this <code>Bitmap</code>.\nSets FillType, the rule used to fill <code>Path</code>. While there is …\nSets FillType, the rule used to fill <code>Path</code>. While there is …\nThe contents of the <code>crate::FontArguments</code> will be copied …\nSets internal flag to mark <code>Bitmap</code> as immutable. Once set, …\nSets internal flag to mark <code>Bitmap</code> as immutable. Once set, …\nSets width, height, <code>AlphaType</code>, ColorType, <code>ColorSpace</code>, and …\nSets width, height, <code>AlphaType</code>, ColorType, <code>ColorSpace</code>, and …\nSpecifies whether <code>Path</code> is volatile; whether it will be …\nSpecifies whether <code>Path</code> is volatile; whether it will be …\nSets the last point on the path. If <code>Point</code> array is empty, …\nSets the last point on the path. If <code>Point</code> array is empty, …\nDEPRECATED – use <code>M44</code> version\nReplaces <code>Matrix</code> with <code>matrix</code>. Unlike <code>Self::concat()</code>, any …\nReplaces <code>pixel_ref</code> and origin in <code>Bitmap</code>. <code>offset</code> specifies …\nReplaces <code>pixel_ref</code> and origin in <code>Bitmap</code>. <code>offset</code> specifies …\nSet float uniform values by name.\nSet int uniform values by name.\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nReturns bit shift converting row bytes to row pixels.\nReturns bit shift converting row bytes to row pixels.\nSkews <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis. A …\nReturns a copy of this path in the current state.\nReturns a copy of this path in the current state.\n<code>spot_lit_diffuse()</code>\n<code>spot_lit_diffuse()</code>\n<code>spot_lit_specular()</code>\n<code>spot_lit_specular()</code>\nAngle in degrees where the arc begins. Zero means …\nAll Sk* types are accessible via skia_safe::\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nChecks whether there is a supported combination of color …\nAll Sk* types are accessible via skia_safe::\nSometimes a canvas is owned by a surface. If it is, …\nSwaps the fields of the two bitmaps.\nExchanges the verb array, <code>Point</code> array, weights, and …\nExchanges the verb array, <code>Point</code> array, weights, and …\nSwaps the fields of the two bitmaps.\nSweep angle in degrees; positive is clockwise.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns an approximation of the amount of texture memory …\nReturns an approximation of the amount of texture memory …\n<code>tile()</code>\n<code>tile()</code>\nAll Sk* types are accessible via skia_safe::\nThe number of minutes that this is ahead of or behind UTC.\nIf the filter can be represented by a 5x4 matrix, this …\nIf the filter can be represented by a 5x4 matrix, this …\nIf the filter can be represented by a source color plus …\nIf the filter can be represented by a source color plus …\nReturns raster image or lazy image. Copies <code>Image</code> backed by …\nReturns raster image or lazy image. Copies <code>Image</code> backed by …\nReturns raster image. Copies <code>Image</code> backed by GPU texture …\nReturns raster image. Copies <code>Image</code> backed by GPU texture …\n<code>to_raw_shader</code> functions like <code>to_shader</code>, but for images …\n<code>to_raw_shader</code> functions like <code>to_shader</code>, but for images …\nMake a shader with the specified tiling, matrix and …\nMake a shader with the specified tiling and mipmap …\nMake a shader with the specified tiling, matrix and …\nMake a shader with the specified tiling and mipmap …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReplaces FillType with its inverse. The inverse of …\nReplaces FillType with its inverse. The inverse of …\nThe y coordinate of the rectangle’s top edge.\nThe y coordinate of the rectangle’s top edge.\nReturns the <code>SurfaceProps</code> associated with the canvas that …\nDEPRECATED Legacy version of <code>Self::local_to_device()</code>, …\nTransforms verb array, <code>Point</code> array, and weight by matrix. …\nTransforms verb array, <code>Point</code> array, and weight by matrix. …\nTranslates <code>Matrix</code> by <code>d</code>.\nSets <code>ImageInfo</code> to width, height, and native color type; …\nSets <code>ImageInfo</code> to width, height, and native color type; …\nAllocates pixel memory with HeapAllocator, and replaces …\nAllocates pixel memory with HeapAllocator, and replaces …\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …\nSets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …\nAll concrete node types can be converted to a <code>TypedNode</code>\nAll Sk* types are accessible via skia_safe::\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns value unique to image. <code>Image</code> contents cannot …\nReturns value unique to image. <code>Image</code> contents cannot …\nThis function will return the number of unresolved glyphs …\nMacro that implements Send and Sync.\nUpdates internal bounds so that subsequent calls to …\nUpdates internal bounds so that subsequent calls to …\nMacro that verifies a variant name at compile time.\nAll Sk* types are accessible via skia_safe::\nReturns pixel count in each row. Should be equal or less …\nReturns pixel count in each row.\nReturns pixel count in each row; may be zero or greater.\nReturns pixel count in each row. Should be equal or less …\nReturns pixel count in each row.\nReturns pixel count in each row; may be zero or greater.\nCreate a new shader that produces the same colors as …\nCreate a new shader that produces the same colors as …\nReturns an image with the same “base” pixels as the …\nReturns an image with the same “base” pixels as the …\nReturns a YUVAInfo that is identical to this one but with …\nReturns a YUVAInfo that is identical to this one but with …\nReturn a shader that will apply the specified <code>local_matrix</code> …\nReturn a shader that will apply the specified <code>local_matrix</code> …\nOffsets <code>Point</code> array by <code>(d.x, d.y)</code>.\nOffsets <code>Point</code> array by <code>(d.x, d.y)</code>.\nReturns a YUVAInfo that is identical to this one but with …\nReturns a YUVAInfo that is identical to this one but with …\nTransforms verb array, <code>Point</code> array, and weight by matrix. …\nTransforms verb array, <code>Point</code> array, and weight by matrix. …\nReturn a color filter that will compute this filter in a …\nReturn a shader that will compute this shader in a context …\nReturn a color filter that will compute this filter in a …\nReturn a shader that will compute this shader in a context …\nWrap the handle in a type that can be sent to another …\nFFI interoperability for skia-safe’s wrapper types.\nCopies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …\nCopies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …\nCopies <code>crate::Rect</code> of pixels from the src <code>Bitmap</code> to the …\nCopies <code>crate::Rect</code> of pixels from the src <code>Bitmap</code> to the …\nCopies <code>crate::Rect</code> of pixels from the src <code>Pixmap</code> to the …\nCopies <code>crate::Rect</code> of pixels from the src <code>Pixmap</code> to the …\ne.g. 2005\nAll Sk* types are accessible via skia_safe::\nAll Sk* types are accessible via skia_safe::\nRepresents an arc along an oval boundary, or a closed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBounds of oval containing the arc.\nAngle in degrees where the arc begins. Zero means …\nSweep angle in degrees; positive is clockwise.\nCreate a blender that implements the following: …\nStack helper class calls <code>Canvas::restore_to_count()</code> when …\n<code>Canvas</code> provides an interface for drawing, and how the …\nUsed to pass either a slice of <code>Point</code> or <code>RSXform</code> to …\ninitializes with previous contents\n<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …\nRepresents a <code>Canvas</code> that is owned and dropped when it goes …\nSelects if an array of points are drawn as discrete …\n<code>SaveLayerFlags</code> provides options that may be used in any …\n<code>SaveLayerRec</code> contains the state used to create the layer.\n<code>SrcRectConstraint</code> controls the behavior at the edge of …\nProvides access to Canvas’s pixels.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nIf not <code>None</code>, this triggers the same initialization …\nIf the layer is initialized with prior content (and/or …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHints at layer size limit\nsource bounds to draw from\nIf not <code>None</code>, this triggers a color space conversion when …\narray of colors\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nSets <code>Self::bounds</code>, <code>Self::paint</code>, and <code>Self::backdrop</code> to <code>None</code>…\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRestores <code>Canvas</code> to saved state. Drop is called when …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nPreserves LCD text, creates with prior layer contents\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nWritable pixels’ <code>ImageInfo</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>Canvas</code> top layer origin, its top-left corner\nModifies overlay\nAddress of pixels\narray of fill types\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRestores <code>Canvas</code> to saved state immediately. Subsequent …\nWritable pixels’ row bytes\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nDEPRECATED – use <code>M44</code> version\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nx-axis values dividing bitmap\ny-axis values dividing bitmap\n<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …\nOptional setting per rectangular grid entry to make it …\nsource bounds to draw from\narray of colors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\narray of fill types\nx-axis values dividing bitmap\ny-axis values dividing bitmap\nReflected across x-axis\nRotated 180\nThese values match the orientation …\nRotated 90 CCW\nReflected across x-axis, Rotated 90 CCW\nReflected across x-axis, Rotated 90 CW\nRotated 90 CW\nDefault\nReflected across y-axis\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the encoded origin includes a 90 degree …\nGiven an width and height of the source data, returns a …\nCopy the pixels in src into dst, applying the orientation …\nReturn a copy of the provided ImageInfo with the width and …\nBlends between the constant color (src) and input color …\nSee <code>hsla_matrix_of_color_matrix()</code>\nCreate a color filter that multiplies the RGB channels by …\nCreate a table color filter, copying the table into the …\nCreate a table color filter, with a different table for …\nCreate a table color filter that holds a ref to the shared …\nBlends between the constant color (src) and input color …\nReturns the argument unchanged.\nSee <code>hsla_matrix_of_color_matrix()</code>\nCalls <code>U::from(self)</code>.\nCreate a color filter that multiplies the RGB channels by …\nCreate a table color filter, copying the table into the …\nCreate a table color filter, with a different table for …\nCreate a table color filter that holds a ref to the shared …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDocument is currently on a page and can be drawn onto.\nDocument is currently open. May contain several pages.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrapper type of a font weight.\nWrapper type for the width of a font.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMakes a <code>DirectContext</code> which uses Metal as the backend. The …\nA description of a set BackendTextures that hold the …\nA set of BackendTextures that hold the planar data for an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a YUVABackendTextureInfo to describe a set of …\nThe number of crate::Pixmap planes.\nFormat of the ith plane, or <code>None</code> if <code>i &gt;= Self::num_planes()</code>\nAll plane formats.\nIf <code>true</code>, then allow to enable MSAA on new Intel GPUs.\nCan the glyph atlas use multiple textures. If allowed, the …\nIf <code>true</code> this allows path mask textures to be cached. This …\nCurrently on ARM Android we disable the use of GL …\nBugs on certain drivers cause stencil buffers to leak. …\nThe threshold in bytes above which we will use a buffer …\nDisables the use of coverage counting shortcuts to render …\nDisables distance field rendering for paths. Distance …\nDisables correctness workarounds that are enabled for …\nIf <code>true</code>, the GPU will not be used to perform YUV -&gt; RGB …\nIf <code>true</code>, the TessellationPathRenderer will not be used for …\nConstruct mipmaps manually, via repeated downsampling …\nIf <code>true</code>, and if supported, enables hardware tessellation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe maximum size of cache textures used for Skia’s Glyph …\nAbove this threshold size in device space glyphs are drawn …\nSpecifies the number of samples Ganesh should use when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIn Skia’s vulkan backend a single <code>Context</code> submit equates …\nOverrides: These options override feature detection using …\nBelow this threshold size in device space distance field …\nDefault minimum size to use when allocating buffers for …\nSome ES3 contexts report the ES2 external image extension, …\nAllow Ganesh to more aggressively reorder operations to …\nUses a reduced variety of shaders. May perform less …\nMaximum number of GPU programs or pipelines to keep active …\nThis affects the usage of the PersistentCache. We can …\nIf <code>true</code>, texture fetches from mip-mapped textures will be …\nControls whether we check for GL errors after functions …\nIf <code>true</code>, then add 1 pixel padding to all glyph masks in …\nIf <code>true</code>, the caps will never support mipmaps.\nEnables driver workaround to use draws instead of HW …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreates GPU-backed <code>Image</code> from <code>backend_texture</code> associated …\nCreates GPU-backed <code>Image</code> from the provided GPU texture …\nCreates a GPU-backed <code>Image</code> from pixmap. It is uploaded to …\nRetrieves the existing backend texture. If <code>Image</code> is not a …\nReturns subset of this image as a texture-backed image.\nCreates a GPU-backed <code>Image</code> from compressed data. This …\nReturns <code>Image</code> backed by GPU texture associated with …\nCreates a GPU-backed <code>Image</code> from <code>YUVAPixmaps</code>. The image …\nCreates a GPU-backed <code>Image</code> from <code>YUV[A]</code> planar textures. …\nSafety\nMakes a <code>DirectContext</code> which uses Metal as the backend. The …\nRetrieves the back-end render target. If <code>Surface</code> has no …\nRetrieves the back-end texture. If <code>Surface</code> has no back-end …\nReturns <code>Surface</code> on GPU indicated by context. Allocates …\nIf a surface is a Ganesh-backed surface, is being drawn …\nWraps a GPU-backed buffer into <code>Surface</code>. Caller must ensure …\nWraps a GPU-backed texture into <code>Surface</code>. Caller must …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nCreates <code>Surface</code> from CAMetalLayer. Returned <code>Surface</code> takes …\nCreates <code>Surface</code> from MTKView. Returned <code>Surface</code> takes a …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nSafety\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nSafety\nSafety\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nType that represents either a slice of <code>Color</code>, or a slice …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOn Windows, and if the default feature “embed-icudtl” …\nCachingHint selects whether Skia may internally cache …\nAll Sk* types are accessible via skia_safe:: Skia          …\nSpecify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …\n<code>Image</code> describes a two dimensional array of pixels to draw. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>Image</code> using the encoded data, but attempts to …\nCreates <code>Image</code> from data returned by <code>image_generator</code>. The …\nCreates <code>Image</code> from picture. Returned <code>Image</code> width and …\nCreates a filtered <code>Image</code> on the CPU. filter processes the …\nCreates a CPU-backed <code>Image</code> from <code>bitmap</code>, sharing or copying …\nCreates a CPU-backed <code>Image</code> from compressed data.\nCreates CPU-backed <code>Image</code> from pixel data described by info.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is just a convenience type to allow passing <code>IRect</code>s, …\nCreate a filter that implements a custom blend mode. Each …\nThis filter takes an <code>crate::BlendMode</code> and uses it to …\nCreate a filter that blurs its input by the separate X and …\nCreate a filter that composes ‘inner’ with ‘outer’…\nCreate a filter that applies a crop to the result of the …\nCreate a filter that dilates each input pixel’s channel …\nCreate a filter that moves each pixel in its color input …\nCreate a filter that calculates the diffuse illumination …\nCreate a filter that calculates the specular illumination …\nCreate a filter that draws a drop shadow under the input …\nCreate a filter that renders a drop shadow, in exactly the …\nCreate a filter that always produces transparent black.\nCreate a filter that erodes each input pixel’s channel …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a filter that draws the ‘src_rect’ portion of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a filter that fills ‘lens_bounds’ with a …\nCreate a filter that applies an NxM image processing …\nCreate a filter that transforms the input image by ‘…\nCreate a filter that merges the filters together by …\nCreate a filter that offsets the input filter by the given …\nCreate a filter that produces the <code>Picture</code> as its output, …\nCreate a filter that calculates the diffuse illumination …\nCreate a filter that calculates the specular illumination …\nCreate a filter that fills the output with the per-pixel …\nCreate a filter that calculates the diffuse illumination …\nCreate a filter that calculates the specular illumination …\nCreate a tile image filter.\nReturn a <code>Image</code> using the encoded data, but attempts to …\nCreates <code>Image</code> from data returned by <code>image_generator</code>. The …\nCreates <code>Image</code> from picture. Returned <code>Image</code> width and …\nCreates a filtered <code>Image</code> on the CPU. filter processes the …\nCreates a CPU-backed <code>Image</code> from <code>bitmap</code>, sharing or copying …\nCreates a CPU-backed <code>Image</code> from compressed data.\nCreates CPU-backed <code>Image</code> from pixel data described by info.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMapping between names of color primaries and the number of …\nGeneric film (colour filters using Illuminant C), value 8.\nNo corresponding industry specification identified, value …\nhttps://www.w3.org/TR/css-color-4/#predefined-prophoto-rgb\nRec. ITU-R BT.2020-2, value 9.\nRec. ITU-R BT.470-6 System B, G (historical), value 5.\nRec. ITU-R BT.470-6 System M (historical), value 4.\nRec. ITU-R BT.601-7 525, value 6.\nRec. ITU-R BT.709-6, value 1.\nSMPTE EG 432-1, value 12.\nSMPTE RP 431-2, value 11.\nSMPTE ST 240, value 7 (functionally the same as value 6).\nSMPTE ST 428-1, value 10.\nhttps://www.w3.org/TR/css-color-4/#predefined-a98-rgb\nMapping between transfer function names and the number of …\nRec. ITU-R BT.2100-2 hybrid log-gamma (HLG) system, value …\nIEC 61966-2-1 sRGB, value 13.\nIEC 61966-2-4, value 11, same as REC709 (but is explicitly …\nLinear, value 8\nRec. ITU-R BT.2100-2 perceptual quantization (PQ) system, …\nhttps://w3.org/TR/css-color-4/#valdef-color-prophoto-rgb …\nRec. ITU-R BT.2020-2 (10-bit system), value 14.\nRec. ITU-R BT.2020-2 (12-bit system), value 15.\nRec. ITU-R BT.470-6 System B, G (historical) assumed …\nRec. ITU-R BT.470-6 System M (historical) assumed display …\nRec. ITU-R BT.601-7, same as kRec709, value 6.\nRec. ITU-R BT.709-6, value 1.\nSMPTE ST 240, value 7.\nSMPTE ST 428-1, value 17.\nAddPathMode chooses how <code>add_path()</code> appends. Adding one <code>Path</code>…\nFour oval parts with radii (rx, ry) start at last <code>Path</code> …\nIterates through verb array, and associated <code>Point</code> array …\n<code>Path</code> contain geometry. <code>Path</code> may be empty, or contain one …\nSegmentMask constants correspond to each drawing Verb type …\nVerb instructs <code>Path</code> how to interpret one or more <code>Point</code> and …\nReturns conic weight if <code>next()</code> returned <code>Verb::Conic</code>.\nInitializes <code>Iter</code> with an empty <code>Path</code>. <code>next()</code> on <code>Iter</code> returns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if last <code>Verb::Line</code> returned by <code>next()</code> was …\nReturns <code>true</code> if subsequent calls to <code>next()</code> return …\nSets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …\nReturns next <code>Verb</code> in verb array, and advances <code>Iter</code>. When …\nSets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet a flags value with all known bits set.\nGet the underlying bits value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the filled equivalent of the stroked path.\nOptional metadata to be passed into the PDF factory …\nThe name of the person who created the document.\nPDF streams may be compressed to save space. Use this to …\nThe date and time the document was created.\nIf the document was converted to PDF from another format, …\n1..31\n0..6, 0==Sunday\nEncoding quality controls the trade-off between size and …\nReturns the argument unchanged.\nReturns the argument unchanged.\n0..23\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeywords associated with the document. Commas may be used …\nThe natural language of the text in the PDF. If <code>lang</code> is …\n0..59\nThe date and time the document was most recently modified.\n1..12\nCreate a PDF-backed document.\nIf <code>true</code>, include XMP metadata, a document UUID, and <code>s_rgb</code> …\nThe product that is converting this document to PDF.\nThe DPI (pixels-per-inch) at which features without native …\n0..59\nThe subject of the document.\nThe number of minutes that this is ahead of or behind UTC.\nThe document’s title.\ne.g. 2005\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA resource provider that loads only local / inline base64 …\nA resource provider that uses ureq for downloading …\nThis is used in the SVG Dom and <em>should</em> be used for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelpers that assist in implementing resource providers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData is base64, return it as is.\nAttempt to download the data from the given Url.\nReturns the argument unchanged.\nFigure out the kind of data that should be loaded.\nCalls <code>U::from(self)</code>.\nLoad a typeface via the <code>load()</code> function and generate it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet float uniform values by name.\nSet int uniform values by name.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSpecify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an <code>Shader</code> that will sample the ‘image’. This is …\nCreate an <code>Shader</code> that will sample ‘image’ with minimal …\nCreate an <code>Shader</code> that will sample the ‘image’. This is …\nCreate an <code>Shader</code> that will sample ‘image’ with minimal …\nA trait for accessing the native run handler instance used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOn Windows, and if the default feature “embed-icudtl” …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContentChangeMode members are parameters to …\n<code>Surface</code> is responsible for managing the pixels that a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Surface</code> without backing pixels. Drawing to …\nAllocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…\nAllocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…\nAllocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…\nReturns <code>Surface</code> without backing pixels. Drawing to …\nAllocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…\nAllocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…\nAllocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…\nError when something goes wrong when loading an SVG file. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nEnds the Canvas drawing and returns the resulting SVG. …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates a new SVG canvas.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlign the bottom edge of the placeholder with the baseline …\nMatch the baseline of the placeholder with the baseline.\nAlign the top edge of the placeholder with the baseline …\nAlign the bottom edge of the placeholder with the top edge …\nEfficient reference type to a C++ vector of font family …\nExtends the width of the last rect of each line to match …\nAlign the middle of the placeholder with the middle of the …\nWhere to vertically align the placeholder relative to the …\nMultiple decorations can be applied at once. Ex: Underline …\nProvide tight bounding boxes that fit heights per run.\nProvide tight bounding boxes that fit widths to the runs …\nAlign the top edge of the placeholder with the top edge of …\nGet a flags value with all known bits set.\nThe final computed ascent and descent for the line. This …\nThe y position of the baseline for this line from the top …\nDistance from the top edge of the rect to the baseline …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nChecks if a given text blob contains colored font or bitmap\nChecks if a given text blob contains glyph with emoji\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe index in the text buffer the line ends.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n<code>FontMetrics</code> contains the following metrics:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns the visible text on the line (excluding a possible …\nFinds the closest glyph cluster for a visual text position\nFinds the information associated with the closest glyph to …\nReturns the font that is used to shape the text at the …\nReturns the font used to shape the text at the given …\nReturns the information about all the fonts used to shape …\nFinds a glyph cluster for text index\nRetrieves the information associated with the glyph …\nReturns the index of the glyph that corresponds to the …\nReturns line metrics info for the line\nFinds the line number of the line that contains the given …\nFinds the line number of the line that contains the given …\nReturns path for a text blob\nReturns path for a given line\nReturns a vector of bounding boxes that enclose all text …\nReturns indices and references to style metrics in the …\nReturns the number of style metrics in the given index …\nFinds the first and last glyphs that define a word …\nTotal height of the paragraph including the current line.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe left edge of the line. The right edge can be obtained …\nZero indexed line number\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …")