searchState.loadedDescShard("skia_safe", 1, "Calls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait that supports the conversion from a C/C++ value …\nThis trait supports the conversion of a wrapper into it’…\nA trait that supports the conversion from a C/C++ …\nA trait that supports the conversion from a C/C++ value …\nAccess the wrapped pointer.\nAccess the wrapped pointer.\nUnwraps the wrapper type into the native pointer.\nWraps a native pointer into a wrapper type. Returns <code>None</code> …\nSpecifies how YUV (and optionally A) are divided among …\nDescribes how subsampled chroma values are sited relative …\nUV subsampling is also specified in the enum value names …\nSpecifies the structure of planes for a YUV image with …\nGiven a per-plane row bytes, determine size to allocate …\nDimensions of the full resolution image (after planes have …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDoes the PlaneConfig have alpha values?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>dimensions</code> should specify the size of the full resolution …\nNumber of Y, U, V, A channels in the ith plane for a given …\nNumber of planes for a given PlaneConfig.\nGiven image dimensions, a planer configuration, …\nReturns the dimensions for each plane. Dimensions are as …\n<code>SubsamplingFactors(Subsampling)</code> if <code>plane_index</code> refers to a …\nRatio of Y/A values to U/V values in x and y.\nReturns a YUVAInfo that is identical to this one but with …\nReturns a YUVAInfo that is identical to this one but with …\nData type for Y, U, V, and possibly A channels independent …\nSpecifies how YUV (and optionally A) are divided among …\nUV subsampling is also specified in the enum value names …\nGets the default ColorType to use with <code>num_channels</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the ColorType is supported for YUVA pixmaps this will …\nData type for Y, U, V, and possibly A channels independent …\nYUVAInfo combined with per-plane ColorTypes and row bytes. …\nHelper to store Pixmap planes as described by a …\nAllocate space for pixmaps’ pixels in the YUVAPixmaps.\nDetermine size to allocate for all planes. Optionally …\nThe per-YUV<code>[A]</code> channel data type.\nUse storage in Data as backing store for pixmaps’ …\nLike above but uses …\nUse passed in memory as backing store for pixmaps’ …\nWraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …\nTakes an allocation that is assumed to be at least […\nIs this valid and does it use color types allowed by the …\nInitializes the YUVAPixmapInfo from a YUVAInfo with …\nThe number of Pixmap planes.\nNumber of pixmap planes.\nGet the ith Pixmap plane. <code>Pixmap</code> will be default …\nImage info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …\nAn iterator of all planes’ image infos.\nAccess the Pixmap planes.\nRow bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …\nRow bytes for all planes.\nData type for Y, U, V, and possibly A channels independent …\nSpecifies how YUV (and optionally A) are divided among …\nUV subsampling is also specified in the enum value names …\nAll legal combinations of PlaneConfig and DataType are …\nDefaults to nothing supported.\nGets the default ColorType to use with <code>num_channels</code> …\nUpdate to add support for pixmaps with <code>num_channels</code> …\nIf the ColorType is supported for YUVA pixmaps this will …\nChecks whether there is a supported combination of color …")